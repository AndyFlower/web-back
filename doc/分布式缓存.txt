分布式系统产生的原因：
    第一、互联网环境的应用系统，业务需求复杂，必须进行系统级别的垂直拆分，保证各个业务的业务清晰，格自部署对外业务。
    第二、针对的用户群体广泛，就存在高并发的问题，基于此我们会把不同的应用系统部署到不同的节点上，也需要把不同的数据，分散到不同的物理节点上。
    第三、分布式系统的产生，出现了数据的一致性、安全性、可扩展性、服务器的高可用、高承载能力。
NoSql简介：
    NoSQL，泛指非关系型的数据库, NoSQL数据库的四大分类 :
   键值(Key-Value)存储数据库：这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。如Redis, Voldemort, Oracle BDB
   列存储数据库：这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。如 HBase, Riak
   文档型数据库：该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb
   图形(Graph)数据库：图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。如：Neo4J, InfoGrid, Infinite Graph
Redis+lua脚本解决抢红包的问题：
   http://blog.csdn.net/hengyunabc/article/details/19433779/
rdb aof

Redis目前业界提供三种方式去应用在生产环境
    第一种：使用主从复制的方式
    第二种：使用高可用哨兵、Keepalived的方式
    第三种：集群方式或第三方支持如codis集群等技术

SSDB是一个快速的用来存储十亿级别列表数据的开源 NoSQL 数据库。
    SSDB官网：http://ssdb.io/zh_cn/
    替代 Redis 数据库, Redis 的 100 倍容量
    LevelDB 网络支持, 使用 C/C++ 开发
    Redis API 兼容, 支持 Redis 客户端
    适合存储集合数据, 如 list, hash, zset...
    客户端 API 支持的语言包括: C++、PHP、Python、Cpy、Java、NodeJS、Ruby、Go。
    持久化的队列服务
    主从复制, 负载均衡

redis安装：
   1、下载redis安装包：https://redis.io/
   2、将下载好的tar.gz安装包放到自己要安装的目录
   3、解压tar -zxvf redis-*.tar.gz
   4、进入解压之后的redis文件夹中进行编译 cd redis-*.* ; make
   5、进入到src目录下验证redis-server  redis-cli等文件
   6、建立两个文件夹存放redis命令和配置文件
      mkdir -p /usr/local/redis/etc
      mkdir -p /usr/local/redis/bin
   7、将redis-conf文件移动到/usr/local/redis/etc下
   8、将src文件中的mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server移动到/usr/local/redis/bin下
   9、修改redis-conf中的daemonize 为yes（设为后台启动）
   10、启动
       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis-conf
   11、验证是否成功
       ps -ef|grep redis
   12、进入redis客户端
       /usr/local/redis/bin/redis-cli
   13、操作
       keys *
       set name sanglp
       get name
       set age 18
       get age
    14、退出redis客户端
       quit
    15、退出redis服务端
       ①/usr/local/redis/bin/redis-cli shutdown
       ②pkill redis-server
       ③kill  进程号

redis数据类型：
    redis一共分为五种基本数据类型：String Hash List Set ZSet
    1、String类型
    String类型是包含很多种类型的特殊类型，并且是二进制安全的。比如序列化的对象进行存储，比如一张图片二进制存储，比如一个简单的字符串，数值等等。
    set和get方法：
        ①设置值：set name sanglp 取值 get name(设置name多次会被覆盖)
	②删除值：del name
	③使用setnx（not exists）
	    name如果不存在进行设置，存在就不需要进行设置了，返回0.
	④使用setex(expired)
	    setex color 10 red设置color的有效期为10秒，10秒后返回nil(redis中nil表示空)
        ⑤使用setrange替换字符串
	    set email 1308445442@qq.com 
	    setrange email 10 ww(10表示从第几位开始替换，后面跟上替换的字符串)
	⑥使用一次性设置多个和获取多个值的mset mget方法：
	    mset name sanglp age 18 
	    mget name age
	    msetnx name sanglp age 18
	⑦incr和decr方法：对某一个值进行递增和递减
	⑧incrby和decrby方法：对某个值进行指定长度的递增和递减
	⑨append[name]方法：字符串追加
	⑩strlen[name]方法：获取字符串的长度
    2、Hash类型
    Hash类型是String类型的field和value的映射表，或者说一个String集合。他特别适合存储对象，相比较而言，将一个对象类型存储在Hash类型要比存储在String类型里占用更少的内存空间，并方便存取整个对象
    eg:hset myhash filed1 hello(hset值hash的集合，myhash是集合名字，field1是字段名hello为值)使用hget myhash field1获取内容，也可以存储多个值。
       hmset可以进行批量存储多个键值对：hmset myhash sex man addr beijing也可使用hmget进行批量获取多个键值对
       hsetnx
       hincrby和hdecrby:集合的递增和递减
       hexists是否存在key如果存在返回1不存在返回0
       hlen返回hash集合里的所有的健数值
       hdel删除指定的hash的field
       hkeys返回hash里所有的字段
       hvals返回hash的所有value
       hgetall返回hash里所有的key和value
    3、List类型
       List类型是一个链表结构的集合，其主要功能有push pop 获取元素等，List是一个双端链表的结构，我们可以通过相关操作进行集合的头部或者尾部添加删除元素。ist的设计即可以作为栈，又可以作为队列
       lpush方法：从头部加入元素（栈）先进后出
           lpush list1 "hello" lpush list1 "world"
	   lange list1 0 -1 （从头取到末尾）
       rpush方法：从尾部加入元素（队列）先进先出
           rpush list2 "shanxi" rpush list2 "sanglp"
	   lrange list2 0 -1
       insert方法：插入元素
           insert list3 before [集合的元素] [插入的元素]
     4、set类型和zset类型
        set集合是String类型的无序集合，set是通过hashtable实现的，对集合我们可以取交集、并集、差集
	sadd方法：向名称为key的set中添加元素
	         set集合不允许重复元素，smembers查看set集合的元素
	srem方法：删除set集合元素
	spop方法：随机返回删除的key
	sdiff方法：返回两个集合的不同元素
	sdiffstore方法：将返回的不同元素存储到另外一个集合里
	sinter方法：返回集合的交集
	sinterstore方法：返回交集结果，存入set3中
	sunion方法：取并集
	sunionstore方法：取得并集，存入set3中

Redis高级命令及特性：
        返回满足的所有键 keys * 
	exists是否存在指定的key
	expire设置某个key的过期时间，使用ttl查看剩余时间
	persist取消过期时间
	select 选择数据库  数据库为0到15默认进入的是0数据库
	move [key][数据库下标]将当前数据中的key转移到其他数据库中
	randomkey随机返回数据库里的一个key
	rename 重命名key
	echo 打印命令
	dbsize查看数据库的key数量
	info获取数据库信息
	config get实时存储收到的请求（返回相关的配置信息）
	flushdb清空当前数据库，flushall清空所有数据库

Redis的安全性：
     因为redis速度相当快，所以在一台比较好的服务器下，一个外部用户在一秒内可以进行15W次的密码尝试，这意味着需要设定非常强大的密码来防止暴力破解

主从复制：
      1、Master可以拥有多个slave
      2、多个slave可以连接同一个master外，还可以连接其他的slave
      3、主从复制不会阻塞master在同步数据时，master可以继续处理client请求
      4、提供系统的伸缩性

主从复制过程：
      1、slave和master建立连接，发送sync同步命令
      2、master会开启一个后台进程，将数据库快照保存到文件中，同时master主进程会开始收集新的写命令并缓存
      3、后台完成保存后，就将文件发送给slave
      4、slave将文件保存到硬盘上

主从复制配置：
      clone服务器之后修改slave的IP地址
      修改配置文件/usr/local/redis/etc/redis.conf
      第一步：slaveof <masterip> <masterport>
      第二步：masterauth <master-password>
      使用info查看role角色即可知道是主服务或从服务


redis哨兵模式：
      有了主从复制的实现之后，我们如果想对主从服务器进行监控
      哨兵的含义就是监控redis系统的运行状况，其主要功能有两点：
      1、监控主数据库和从数据库是否正常运行
      2、主数据库出现故障时，可以自动将从数据库转换为主数据库，实现自动切换
      实现：在其中一台从服务器配置sentinel.conf
      1、copy文件sentinel.conf到/usr/local/redis/etc/下
      2、修改sentinel.conf文件
         sentinel monitor mymaster 192.168.181.201 6379 #名称 ip 端口 投票选举次数
	 sentinel down-after-milliseconds mymaster 6000 #默认1s检测一次，这里配置超时6000毫秒为宕机
	 sentinel failover-timeout mymaster 900000
	 sentinel can-failover mymaster yes
	 sentinel parallel-syncs mymaster 2
      3、启动sentinel哨兵
         /usr/local/redis/bin/redis-server /usr/local/redis/etc/sentinel.conf --sentinel &
      4、查看哨兵相关信息命令
         /usr/local/redis/bin/redis-cli -h 192.168.181.202 -p 26379 info Sentinel
      5、关闭主服务器查看集群信息
         /usr/local/redis/bin/redis-cli -h 192.168.181.201 -p 6379 shutdown 

redis简单事务：
      首先是使用multi方法打开事务，然后进行设置，这是设置的数据都会放入队列里进行保存最后使用exec执行，把数据依次存储到redis中，使用discard方法取消事务
      redis的事务不能保证同时成功或失败进行提交或回滚，所以redis的事务目前比较简单

redis持久化机制：
      redis是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到硬盘来保证持久化。redis持久化的两种方式：
      1、snapshotting(快照)默认方式，将内存中已快照的方式写入到二进制文件中，默认为dump.rdb,可以通过配置设置自动做快照持久化的方式，我们可以配置redis在n秒内如果超过m个key则修改就自动做快照
         snapshotting设置：
	     save 800 1 #800秒内如果超过一个key被修改则发起快照保护
	     save 300 10 #300秒内如果超过10个key被修改，则发起快照保存
	     save 60 10000
      2、append-only file(编写aof)的方式（类似与oracle日志）由于快照方式是在一定时间间隔做一次，所以可能发生redis意外down的情况就会丢失最后一次快照后的所有修改的数据，aof比快照的方式有更好的持久化性，是由于在使用sof时，redis会将每一个收到的写命令都通过write函数追加到命令中，当redis重新启动时会重新执行文件中保存的写命令来在内存中重建这个数据库的内容，这个文件在bin目录下：
        appendonly.aof aof不是立即写到硬盘上，可以通过配置文件修改强制写到硬盘上
	aof设置：
	     appendonly yes #启动aof持久化方式有三种修改方式redis.conf配置文件
	     appendfsync always #收到写命令就立即写入到磁盘，效率最慢，但是保证完全的持久化
	     appendfsync everysec #收到写命令就立即写入到磁盘，效率最慢，但是保证完全的持久化
	     appendfsync no # 完全依赖os性能最好持久化没保证

redis发布与订阅消息：
      使用subscribe【频道】进行订阅监听
      使用publish【频道】【发布内容】进行发布消息广播


redis集群的搭建：
      集群搭建：至少要三个master
      1、创建一个文件夹redis-cluster,然后在其下面建立文件夹
      2、把之前的redis.conf配置文件拷贝到建立的文件下，进行修改各文件配置
         daemonize yes
	 port 700*
	 bind 192.168.181.201(必须绑定当前机器的ip)
	 dir /usr/local/redis-cluster/700*/  (指定数据文件存放位置 不然会丢失数据)
	 cluster-enabled yes  (启动集群模式)
	 cluster-config-file nodes700*.conf 
	 cluster-node-timeout 5000
	 appendonly yes
      3、把修改后的配置文件，分别copy到各个文件夹下，注意每个文件修改端口号，并且nodes文件也不相同
      4、由于redis集群需要使用ruby命名，所以我们需要安装ruby
         yum install ruby
	 yum install rubygems
	 gem install redis(安装redis和ruby的接口)
      5、分别启动redis实例，然后检查是否启动成功
         /usr/local/redis/bin/redis-server /usr/local/redis-cluster/7001/redis.conf
	 ps -ef|grep redis #查看是否启动成功
      6、首先到redis安装目录下，然后执行redis-trib.rb命令
         cd /home/sanglp/software/src
	 ./redis-trib.rb create --replicas 1 192.168.181.201:7001 192.168.181.201:7002 192.168.181.201:7003 192.168.181.201:7004 192.168.181.201:7005 192.168.181.201:7006
	                                  【主节点和slave的比例】 
					  三主三从
      7、验证
         /usr/local/redis/bin/redis-cli -c -h 192.168.181.201 -p 7001
      
      8、集群操作命令
         create  :构建集群
	 fix :单点修复
	 check：集群验证
	 add-node：添加节点
	 del-node：删除节点
	 reshard:重新分片
         
集群命令：
      CLUSTER INFO  打印集群的信息
      CLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息

      CLUSTER MEET <ip> <port>  将ip和port所指定的节点添加到集群当中，让它成为集群的一份子
      CLUSTER FORGET <node_id>  从集群中移除node_id指定的节点
      CLUSTER REPLICATE <node_id>  将当前节点设置为node_id指定的节点的从节点
      CLUSTER SAVECONFIG  将节点的配置文件保存到硬盘里面

      CLUSTER ADDSLOTS <slot> [slot...] 将一个或多个槽指派给当前节点
      CLUSTER DELSLOTS <slot> [slot]  移除一个或多个槽对当前节点的指派
      CLUSTER FLUSHLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点
      CLUSTER SETSLOT <slot> NODE <node_id> 将槽slot指派给node_id指定的节点，如果槽已经指派给另一个节点那么先让另一个节点删除该槽，然后再进行指派
      CLUSTER SETSLOT <slot> MIGRATING <node_id>将本节点的槽slot迁移到node_id指定的节点中
      CLUSTER SETSLOT <slot> IMPORTING <node_id> 从node_id指定的节点中导入槽slot到本节点
      CLUSTER SETSLOT <slot> STABLE 取消对槽slot的导入或者迁移

      CLUSTER KEYSLOT <key> 计算键key应该被放置在哪个槽上
      CLUSTER COUNTKEYSINSLOT <slot> 返回槽slot目前包含的键值对数量
      CLUSTER GENKEYSINSLOT <slot> <count> 返回count个slot槽中的键

问题：
    1、主从复制master上显示slave数量为0  slave上显示有master的信息日志中显示 Error condition on socket for SYNC: Connection refused
       答：将redis.conf中的bind 127.0.0.1 修改为bind 0.0.0.0  或者直接将bind 127.0.0.1 注释掉
       如果redis主服务器绑定了127.0.0.1那么跨服务器IP的访问就会失败，从服务器用IP和端口访问主的时候，主服务器发现本机6379端口绑定了127.0.0.1也就是只有本机才能访问，外部请求会被过滤，测试环境考虑bind 0.0.0.0 线上生产环境建议绑定IP地址
    2、redis手动指定log日志文件
       答：在redis.conf文件中找到logleve notice在后面的logfile中添加"/usr/local/redis/etc/redis.log"
    3、从节点上写数据
       答：(error) READONLY You can't write against a read only slave.
    4、redis requires Ruby version >= 2.2.2问题
       答：解决办法是 先安装rvm，再把ruby版本提升至2.3.3
            1.安装curl
               sudo yum install curl
            2. 安装RVM
               curl -L get.rvm.io | bash -s stable 
            3. source /usr/local/rvm/scripts/rvm
            4. 查看rvm库中已知的ruby版本
                rvm list known
            5. 安装一个ruby版本
                rvm install 2.3.3
            6. 使用一个ruby版本
                rvm use 2.3.3
            7. 设置默认版本
                rvm remove 2.0.0
            8. 卸载一个已知版本
                ruby --version
            9. 再安装redis就可以了
                gem install redis
