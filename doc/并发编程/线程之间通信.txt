2.1线程之间通信
线程通信概念：线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体，线程间的通信就成为整体的必用方法之一。当线程存在通信指挥，系统间的交互交互性就会更强大，在提高CPU利用率的同时还会使开发人员对线程任务在处理的过程中进行有效的把控和监督。
使用wait/notify方法实现线程间的通信。（注意这两个方法都是object的类方法，换句话说java为所有的对象都提供了这两个方法）。
package com.slp.base.conn008;

import java.util.ArrayList;
import java.util.List;

public class ListAdd1 {

	/**
	 * 1、不添加volatile关键字的时候
	 * 输出结果：当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *2、添加volatile关键字
	 *当前线程：t1添加了一个元素..
         *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程收到通知：t2 list size = 5 线程停止..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *当前线程：t1添加了一个元素..
	 *Exception in thread "t2" java.lang.RuntimeException
	 *at com.slp.base.conn008.ListAdd1$2.run(ListAdd1.java:58)
	 *	at java.lang.Thread.run(Thread.java:745)
	 */
	private volatile static List list = new ArrayList();	
	
	public void add(){
		list.add("slp");
	}
	public int size(){
		return list.size();
	}
	
	public static void main(String[] args) {
		
		final ListAdd1 list1 = new ListAdd1();
		
		Thread t1 = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					for(int i = 0; i <10; i++){
						list1.add();
						System.out.println("当前线程：" + Thread.currentThread().getName() + "添加了一个元素..");
						Thread.sleep(500);
					}	
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}, "t1");
		
		Thread t2 = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true){
					if(list1.size() == 5){
						System.out.println("当前线程收到通知：" + Thread.currentThread().getName() + " list size = 5 线程停止..");
						throw new RuntimeException();
					}
				}
			}
		}, "t2");		
		
		t1.start();
		t2.start();
	}
	
	
}

1、wait和notify必须配合synchronized关键字使用
2、wait方法释放锁，notify方法不释放锁
package com.slp.base.conn008;

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
/**
 * wait notfiy 方法，wait释放锁，notfiy不释放锁
 * @author slp
 *
 */
public class ListAdd2 {
	private volatile static List list = new ArrayList();	
	
	public void add(){
		list.add("slp");
	}
	public int size(){
		return list.size();
	}
	
	public static void main(String[] args) {
		
		final ListAdd2 list2 = new ListAdd2();
		
		// 1 实例化出来一个 lock
		// 当使用wait 和 notify 的时候 ， 一定要配合着synchronized关键字去使用
		//final Object lock = new Object();
		
		final CountDownLatch countDownLatch = new CountDownLatch(1);
		
		Thread t1 = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					//synchronized (lock) {
						for(int i = 0; i <10; i++){
							list2.add();
							System.out.println("当前线程：" + Thread.currentThread().getName() + "添加了一个元素..");
							Thread.sleep(500);
							if(list2.size() == 5){
								System.out.println("已经发出通知..");
								countDownLatch.countDown();
								//lock.notify();
							}
						}						
					//}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

			}
		}, "t1");
		
		Thread t2 = new Thread(new Runnable() {
			@Override
			public void run() {
				//synchronized (lock) {
					if(list2.size() != 5){
						try {
							//System.out.println("t2进入...");
							//lock.wait();
							countDownLatch.await();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					System.out.println("当前线程：" + Thread.currentThread().getName() + "收到通知线程停止..");
					throw new RuntimeException();
				//}
			}
		}, "t2");	
		
		t2.start();
		t1.start();
		
	}
	
}
