<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">
    <!--1 引入属性文件，在配置中占位使用 -->
    <context:property-placeholder location="classpath*:db.properties" />
    <!--加载redis配置文件-->
    <context:property-placeholder location="classpath*:redis.properties" ignore-unresolvable="true"/>
    <!--加载rabbitmq-->
    <context:property-placeholder location="classpath*:mq.properties" />
    <!--2 配置C3P0数据源 原始第一版 -->
    <bean id="datasource1" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${mysql.driver}" />
        <!-- url -->
        <property name="jdbcUrl" value="${mysql.url}" />
        <!-- 用户名 -->
        <property name="user" value="${mysql.uid}" />
        <!-- 密码 -->
        <property name="password" value="${mysql.password}" />
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 -->
        <property name="acquireIncrement" value="${mysql.acquireIncrement}"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="${mysql.initialPoolSize}"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="${mysql.minPoolSize}"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="${mysql.maxPoolSize}"></property>
    </bean>

    <!--2 配置druid数据源 -->
    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--驱动类名 -->
        <property name="driverClassName" value="${mysql.driver}" />
        <!-- url -->
        <property name="url" value="${mysql.url}" />
        <!-- 用户名 -->
        <property name="username" value="${mysql.uid}" />
        <!-- 密码 -->
        <property name="password" value="${mysql.password}" />
        <!--初始化连接大小-->
        <property name="initialSize" value="${mysql.initialPoolSize}"/>
        <!--连接池最大使用连接数量-->
        <property name="maxActive" value="${mysql.maxPoolSize}"/>
        <!--连接池最小空间-->
        <property name="maxIdle" value="0"/>
        <!--获取连接最大等待时间-->
        <property name="maxWait" value="60000"/>
        <property name="validationQuery" >
            <value >select 1 from dual</value>
        </property>

        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--配置一个连接在池中最小生存的时间。单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <!--打开removeAbandoned功能-->
        <property name="removeAbandoned" value="true"/>
        <!--1800秒 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!--关闭abandoned连接是输出错误日志-->
        <property name="logAbandoned" value="true"/>
        <!--监控数据库-->
        <property name="filters" value="mergeStat"/>
    </bean>
    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置文件路径 -->
        <property name="configLocation" value="classpath:MyBatisCfg.xml"></property>
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:com/slp/xml/*.xml"></property>
    </bean>

    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.slp.dao"></property>
    </bean>

    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--6 容器自动扫描IOC组件 -->
    <context:component-scan base-package="com.slp"></context:component-scan>

    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <bean
            class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.slp.dao"/>
    </bean>


    <!--集成ehcache开始-->
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"/>
    </bean>

    <!-- 开启spring缓存 -->
    <cache:annotation-driven cache-manager="cacheManager" />
    <!--集成ehcache结束-->


    <!--集成redis-->
    <!--jedis配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="100"/>
        <property name="minIdle" value="8"/>
        <property name="maxWaitMillis" value="-1"/>
        <property name="testOnBorrow" value="false"/>
    </bean>
    <!--redis服务器中心-->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig"/>
        <property name="port" value="6379"/>
        <property name="hostName" value="192.168.181.201"/>
        <property name="password" value="123456"/>
        <property name="timeout" value="-1"/>
    </bean>
    <!--redis操作模板  面向对象的模板-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--如果不配置Serializer 那么存储的时候只能使用String ,如果用对象类型存储，那么会提示错误-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    
    <!--配置rabbitmq开始-->
    <bean id="connectionFactoryMq" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg value="192.168.181.201"/>
        <property name="username" value="admin"/>
        <property name="password" value="admin"/>
        <property name="host" value="192.168.181.201"/>
        <property name="port" value="5672"/>
    </bean>
    <bean id="rabbitAdmin" class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg ref="connectionFactoryMq"/>
    </bean>
    <!--创建rabbitTemplate消息模板类-->
    <bean id="rabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">
        <constructor-arg ref="connectionFactoryMq"/>
    </bean>
   <!--创建消息转换器为SimpleMessageConverter-->
    <bean id="serializerMessageConverter" class="org.springframework.amqp.support.converter.SimpleMessageConverter">
    </bean>
    <!--创建持久化的队列-->
    <bean  id="queue" class="org.springframework.amqp.core.Queue">
        <constructor-arg index="0" value="testQueue"></constructor-arg>
        <constructor-arg index="1" value="true"></constructor-arg>
        <constructor-arg index="2" value="false"></constructor-arg>
        <constructor-arg index="3" value="true"></constructor-arg>
    </bean>
    <!--创建交换器的类型 并持久化-->
    <bean id="topicExchange" class="org.springframework.amqp.core.TopicExchange">
        <constructor-arg index="0" value="testExchange"></constructor-arg>
        <constructor-arg index="1" value="true"></constructor-arg>
        <constructor-arg index="2" value="false"></constructor-arg>
    </bean>
    <util:map id="arguments">

    </util:map>
    <!--绑定交换器 队列-->
    <bean id="binding" class="org.springframework.amqp.core.Binding">
        <constructor-arg index="0" value="testQueue"></constructor-arg>
        <constructor-arg index="1" value="QUEUE"></constructor-arg>
        <constructor-arg index="2" value="testExchange"></constructor-arg>
        <constructor-arg index="3" value="testQueue"></constructor-arg>
        <constructor-arg index="4" value="#{arguments}"></constructor-arg>
    </bean>
    <!--用于接收消息的处理类-->
    <bean id="rqmConsumer" class="com.slp.mq.RmqConsumer"></bean>

    <bean id="messageListenerAdapter" class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">
        <constructor-arg ref="rqmConsumer" />
        <property name="defaultListenerMethod" value="rmqProducerMessage"></property>
        <property name="messageConverter" ref="serializerMessageConverter"></property>
    </bean>
    <!-- 用于消息的监听的容器类SimpleMessageListenerContainer,监听队列  queues可以传多个-->
    <bean id="listenerContainer"  class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">
        <property name="queues" ref="queue"></property>
        <property name="connectionFactory" ref="connectionFactoryMq"></property>
        <property name="messageListener" ref="messageListenerAdapter"></property>
    </bean>
    <bean id="rmqProducer" class="com.slp.mq.RmqProducer"></bean>
    <!--配置rabbitmq结束-->
</beans>